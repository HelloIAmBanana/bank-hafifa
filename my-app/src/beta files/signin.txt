import * as React from "react";
import { useForm } from "react-hook-form";
import Ajv from "ajv";
import Grid from "@mui/material/Grid";
import { Box } from "@mui/material";
import CssBaseline from "@mui/material/CssBaseline";
import Paper from "@mui/material/Paper";
import { Link } from "react-router-dom";
import loginImage from "../../imgs/loginPage.svg";
import { useState, useEffect } from "react";
import Checkbox from "@mui/material/Checkbox";
import FormHelperText from '@mui/material/FormHelperText';

function getAsyncData(key: string) {
  const myPromise: Promise<UserData[]> = new Promise((resolve) => {
    setTimeout(() => {
      const data = localStorage.getItem(key);
      resolve(data ? JSON.parse(data) : []);
    }, 1000);
  });
  return myPromise;
}
function getAsyncCurrentUser(key: string) {
  const myPromise: Promise<UserData> = new Promise((resolve) => {
    setTimeout(() => {
      const data = localStorage.getItem(key);
      resolve(data ? JSON.parse(data) : []);
    }, 1000);
  });
  return myPromise;
}

function setCurrentUser(key: string, value: UserData) {
  return new Promise((resolve) => {
    setTimeout(() => {
      sessionStorage.setItem(key, JSON.stringify(value));
      resolve(value);
    }, 1000);
  });
}
function setRememberedUser(key: string, value: UserData) {
  return new Promise((resolve) => {
    setTimeout(() => {
      localStorage.setItem(key, JSON.stringify(value));
      sessionStorage.setItem(key, JSON.stringify(value));
      resolve(value);
    }, 1000);
  });
}
const ajv = new Ajv();

type UserData = {
  id: string;
  firstName: string;
  lastName: string;
  birthDate: string;
  hobbies: string[];
  email: string;
  password: string;
  avatarUrl: string;
  gender: string;
  accountType: string;
  role: string;
};

const SignInPage: React.FC = () => {
  const [currentLabelStyle, setCurrentLabelStyle] =
    useState("signinLabelNormal");
  const [currentTitleStyle, setCurrentTitleStyle] =
    useState("signinTitleNormal");
  const [rememberMe, setRememberMe] = React.useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: ''
});
  useEffect(() => {
    const isUserRemembered = async () => {
      const usernameName = await getAsyncCurrentUser("currentUser");
    if(usernameName.firstName !== undefined){
        await setCurrentUser("currentUser", usernameName).then(function () {
            window.location.href = "/welcome";
      })};}
    isUserRemembered()
  }, []);

  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm<UserData>();

  const onChange = () => {
    setCurrentLabelStyle("signinLabelNormal");
    setCurrentTitleStyle("signinTitleNormal");
  };
  const handleInputChange = (event:React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = event.target;
    setFormData({ ...formData, [id]: value });
};
  const onSubmit = async (data: UserData) => {
    const users = await getAsyncData("users");
    
    //console.log(users)
    let realUser: boolean = false;
    for (let i = 0; i < users.length; i++) {
      const currentUser = users[i];
      if (
        currentUser.email.includes(`${data.email}`) &&
        currentUser.email.length == data.email.length
      ) {
        if (
          currentUser.password.includes(`${data.password}`) &&
          currentUser.password.length == data.password.length
        ) {
          if (rememberMe) {
            await setRememberedUser("currentUser", currentUser).then(
              function () {
                realUser = true;
                window.location.href = "/welcome";
              }
            );
          } 
          else {
            await setCurrentUser("currentUser", currentUser).then(function () {
              realUser = true;
              window.location.href = "/welcome";
            });
          }
        }
      }
    }
    if (!realUser) {
      setCurrentLabelStyle("signinLabelIncorrect");
      setCurrentTitleStyle("signinTitleIncorrect");
      setValue("email", "");
      setValue("password", "");
    }
  };
  const handleRememberMe = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRememberMe(event.target.checked);
  };

  return (
    <Grid container component="main" sx={{ height: "90vh" }}>
      <CssBaseline />
      <Grid
        item
        xs={false}
        sm={5}
        md={6}
        my={15}
        sx={{
          backgroundImage: `url(${loginImage})`,
          backgroundRepeat: "no-repeat",
          backgroundSize: "65%",
          borderRadius: "20px",
          backgroundPosition: "center",
        }}
      />
      <Grid
        item
        xs={4}
        sm={6}
        md={5}
        my={5}
        component={Paper}
        elevation={8}
        square={false}
        borderRadius={5}
      >
        <Box
          sx={{
            my: 4,
            mx: 1,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        ></Box>

        <Box
          component="form"
          name="FormData"
          onSubmit={handleSubmit(onSubmit)}
          sx={{ mt: 1 }}
          my={-5}
          onChange={onChange}
        >
          <Grid container spacing={1}>
            {/*  */}
            <Grid item my={5} mx={25} lineHeight={50} spacing={54}>
              <h1 className="firstTitle" style={{ lineHeight: "1" }}>
                Welcome back
              </h1>
            </Grid>
            <Grid item ml={12} sm={12} my={-10} mx={0}>
              <h2 className="secondTitle">Please enter your details.</h2>
            </Grid>
            {/*  */}

            <Grid
              item
              ml={5}
              sm={2}
              mx={6}
              my={7}
              className={currentTitleStyle}
            >
              <h4>Email</h4>
            </Grid>
            <Grid item xs={8} sm={6} my={10}>
              <input
                className={currentLabelStyle}
                type="email"
                id="email"
                {...register("email")}
                required
                //pattern="[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,}$"
                title="example@email.com"
                style={{borderColor:currentLabelStyle == "signinLabelNormal"
                ? "#181818"
                : "#d10000"}}
                onChange={handleInputChange}

                placeholder={
                  currentLabelStyle == "signinLabelNormal"
                    ? "Enter your email"
                    : "Incorrect Credientials"
                }
              />
                          <FormHelperText id="component-error-text" hidden={currentLabelStyle == "signinLabelNormal"
                    ? true
                    : false} style={{color:"red", fontFamily:"Poppins", fontSize:"16px"}}>{formData.email.match("[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,}$")?"Incorrect Credientials":"Entered Email is not real. make sure to use '@' and '.'"}</FormHelperText>
            </Grid>

            <Grid
              item
              ml={5}
              sm={2}
              mx={6}
              my={-6}
              className={currentTitleStyle}
            >
              <h4>Password</h4>
            </Grid>
            <Grid item xs={8} sm={6} my={-3}>
              <input 
              id="password"
                className={currentLabelStyle}
                type="password"
                {...register("password")}
                required
                style={{borderColor:currentLabelStyle == "signinLabelNormal"
                ? "#181818"
                : "#d10000"}}
                onChange={handleInputChange}
                placeholder={
                  currentLabelStyle == "signinLabelNormal"
                    ? "Password"
                    : "Incorrect Credientials"
                }
                

              />
              <FormHelperText id="component-error-text" hidden={currentLabelStyle == "signinLabelNormal"
                    ? true
                    : false} style={{color:"red", fontFamily:"Poppins", fontSize:"16px"}}>{formData.password.length<6?"Entered Password is less then 6 characters":"Incorrect Credientials"}</FormHelperText>
            </Grid>
            <Grid container justifyContent="flex-start">
              <Grid item mx={7} my={6.1} className="existingUserButton">
                <Checkbox
                  onChange={handleRememberMe}
                  title="Remember me"
                ></Checkbox>
                Remember Me
              </Grid>
              <Grid item mx={22.8} my={7}>
                <Link to="/" className="existingUserButton">
                  Forgot password?
                </Link>
              </Grid>
            </Grid>
            <Grid item ml={12} my={-5} mx={13} style={{ width: "30" }} hidden={currentLabelStyle == "signinLabelNormal"
              ? false
              : true}>
              <button
                type="submit"
                className="signinButton"
                style={{ width: "800px", borderRadius: "25px" }}
              >
                Sign in
              </button>
            </Grid>
          </Grid>
        </Box>
      </Grid>
    </Grid>
  );
};

export default SignInPage;
